{
  "hash": "bcf6b1cc229a527b6bad7758fd056600",
  "result": {
    "markdown": "---\ntitle: \"Object oriented programming\"\nauthor: \"Dr. Alexander Fisher\"\ndate: \"January 25, 2023\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Review of types\n\n## R's type hierarchy\n\n-   from most to least complex: class $\\rightarrow$ mode $\\rightarrow$ type\n\n\n::: {.cell}\n\n:::\n\n\n| value             | `typeof()`       | `mode()`       | `class()`       |\n|:------------------|:-----------------|:---------------|:----------------|\n| `TRUE`            | logical | logical | logical |\n| `1`               | double    | numeric    | numeric    |\n| `1L`              | integer   | numeric   | integer   |\n| `\"A\"`             | character  | character  | character  |\n| `NULL`            | NULL | NULL | NULL |\n| `list(1, \"A\")`    | list    | list    | list    |\n| `factor(\"A\")`     | integer    | numeric    | factor    |\n| `function(x) x^2` | closure    | function    | function    |\n| `\\+`              | builtin          | function       | function        |\n| `\\[`              | special          | function       | function        |\n\n. . .\n\nobjects have `class` even if no formal `class` attribute (seen with `attributes()`)\n\n# S3 Object System\n\n## What is S3?\n\n- S3 is R's core object oriented implementation\n\n- S3 is the only OO system used in the base and stats packages, and itâ€™s the most commonly used system in CRAN packages.\n\n- S3 is more flexible (read also: easier to break) than traditional object oriented programming you may have seen before (e.g. Java).\n\n. . .\n\nWorking model: S3 is a system where we attach metadata to an object via the `class` attribute.\n\n## S3 class specialization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(\"A\",\"B\",\"A\",\"C\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint( x )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"A\" \"C\"\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint( factor(x) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] A B A C\nLevels: A B C\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint( unclass( factor(x) ) ) # unclass strips the class attribute\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 1 3\nattr(,\"levels\")\n[1] \"A\" \"B\" \"C\"\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint.default( factor(x) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 1 3\n```\n:::\n:::\n\n\n. . .\n\n\n## Other examples\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x7fe1218a2f58>\n<environment: namespace:base>\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, ...) \nUseMethod(\"t.test\")\n<bytecode: 0x7fe143f91740>\n<environment: namespace:stats>\n```\n:::\n:::\n\n:::\n:::\n\n. . .\n\nNot all base functions use this approach,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (..., na.rm = FALSE)  .Primitive(\"sum\")\n```\n:::\n:::\n\n\n. . .\n\n::: callout-note\nThe `...` (dot-dot-dot) argument means the function can take any number of additional arguments. This is called a \"variable argument\" and it is commonly used so you pass variables to additional nested functions. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1 =  function(y = 0, z = 0) {\n  return(y + z)\n}\n\nf2 <- function(x, ...) {\n  return(x + f1(...))\n}\n\nf2(x = 1, y = 2, z = 3)\n```\n:::\n\n:::\n\n## Generics (what's going on!?)\n\n- An S3 object behaves differently from its underlying base type whenever it's passed to a **generic** function\n\nThe easiest way to tell if a function is a generic is to use `sloop::ftype()` and look for \"generic\" in the output, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sloop)\nftype(print)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"S3\"      \"generic\"\n```\n:::\n:::\n\n\n. . .\n\nFundamentally, the generic function dispatches to a specialized version of the function depending on the class of its input. `UseMethod()` tells a generic to look for the specialized version.\n\nThe syntax for specialized functons is: `<generic>.<class>`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}