[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "statistical computing",
    "section": "",
    "text": "Teaching team & office hours\n\n\n\n\nContact\nTime\nLocation\n\n\n\n\nDr.¬†Alexander Fisher\nalexander.fisher@duke.edu\nWe: 1:30pm-3:30pm\nOld Chem 207\n\n\nDevin Johnson\ndevin.johnson@duke.edu\nMo: 10:00am-12:00pm\nOld Chem 203B\n\n\nTong Lin\ntong.lin@duke.edu\nTh: 9:00am-11:00am\nOld Chem 203B\n\n\n\n\n\nLecture and lab\n\n\n\nLecture\nWe/Fr 12:00 - 1:15pm\nSocial Sciences 136\n\n\nLab 01\nTu 12:00pm - 1:15pm\nOld Chemistry 003\n\n\nLab 02\nTu 1:45pm - 3:00pm\nOld Chemistry 003"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "schedule",
    "section": "",
    "text": "Week\nDate\nTopic\nNotes\nLab\nExam\nProject\n\n\n\n\n0\nFri Jan 13\nwelcome\nüíª\n\n\n\n\n\n1\nTue Jan 17\ngit\nüíª\nlab 0\n\n\n\n\n\nWed Jan 18\ncontrol flow, loops and functions\nüíª\n\n\n\n\n\n\nFri Jan 20\nNAs, lists, attributes and S3\n\n\n\n\n\n\n2\nTue Jan 24\n\n\n\n\n\n\n\n\nWed Jan 25\nUNIX and filesystems\n\n\n\n\n\n\n\nFri Jan 27\ntidy data, dplyr and ggplot\n\n\n\n\n\n\n3\nTue Jan 31\n\n\n\n\n\n\n\n\nWed Feb 01\nfunctional programming and purrr\n\n\n\n\n\n\n\nFri Feb 03\ntext processing and regular expressions\n\n\n\n\n\n\n4\nTue Feb 07\n\n\n\n\n\n\n\n\nWed Feb 08\n\n\n\n\n\n\n\n\nFri Feb 10\n\n\n\n\n\n\n\n5\nTue Feb 14\n\n\n\n\n\n\n\n\nWed Feb 15\ncomplexity, profiling and parallelization\n\n\n\n\n\n\n\nFri Feb 17\nstatistical modeling overview\n\n\n\n\n\n\n6\nTue Feb 21\n\n\n\n\n\n\n\n\nWed Feb 22\nintro to optimization\n\n\n\n\n\n\n\nFri Feb 24\nunivariate Newton-Raphson\n\n\n\n\n\n\n7\nTue Feb 28\n\n\n\n\n\n\n\n\nWed Mar 01\nmultivariate Newton-Raphson examples\n\n\n\n\n\n\n\nFri Mar 03\nMM algorithm I\n\n\n\n\n\n\n8\nTue Mar 07\n\n\n\n\n\n\n\n\nWed Mar 08\nMM algorithm II\n\n\n\n\n\n\n\nFri Mar 10\nEM algorithm\n\n\n\n\n\n\n9\nTue Mar 14\nNO CLASS: Spring break\n\n\n\n\n\n\n\nWed Mar 15\nNO CLASS: Spring break\n\n\n\n\n\n\n\nFri Mar 17\nNO CLASS: Spring break\n\n\n\n\n\n\n10\nTue Mar 21\n\n\n\n\n\n\n\n\nWed Mar 22\nmatrices and BLAS\n\n\n\n\n\n\n\nFri Mar 24\nproject tips\n\n\n\n\n\n\n11\nTue Mar 28\n\n\n\n\n\n\n\n\nWed Mar 29\nshiny I\n\n\n\n\n\n\n\nFri Mar 31\nshiny II\n\n\n\n\n\n\n12\nTue Apr 04\n\n\n\n\n\n\n\n\nWed Apr 05\nMonte Carlo integration\n\n\n\n\n\n\n\nFri Apr 07\nimportance sampling\n\n\n\n\n\n\n13\nTue Apr 11\n\n\n\n\n\n\n\n\nWed Apr 12\nspatial data\n\n\n\n\n\n\n\nFri Apr 14\ncovariance\n\n\n\n\n\n\n14\nTue Apr 18\n\n\n\n\n\n\n\n\nWed Apr 19\nAPIs\n\n\n\n\n\n\n\nFri Apr 21\nSQL\n\n\n\n\n\n\n15\nTue Apr 25\nproject presentations\n\n\n\n\n\n\n\nWed Apr 26\nspecial topic"
  },
  {
    "objectID": "links.html",
    "href": "links.html",
    "title": "links",
    "section": "",
    "text": "RStudio containers\n\nCommunication\n\ncourse slack\n\nCollaboration\n\ncourse GitHub organization\n\nTextbooks\n\nAdvanced R (2nd ed.) - Wickham - Chapman and Hall/CRC, 2019 (978-0815384571)\nR for Data Science - Grolemund, Wickham - O‚ÄôReilly, 2016 (978-1491910399)"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "syllabus",
    "section": "",
    "text": "course website:\n\n\n\n\n\n\nContact\nTime\nLocation\n\n\n\n\nDr.¬†Alexander Fisher\nalexander.fisher@duke.edu\nWe: 1:30pm-3:30pm\nOld Chem 207\n\n\nDevin Johnson\ndevin.johnson@duke.edu\nMo: 10:00am-12:00pm\nOld Chem 203B\n\n\nTong Lin\ntong.lin@duke.edu\nTh: 9:00am-11:00am\nOld Chem 203B\n\n\n\n\n\n\n\n\n\nLecture\nWe/Fr 12:00 - 1:15pm\nSocial Sciences 136\n\n\nLab 01\nTu 12:00pm - 1:15pm\nOld Chemistry 003\n\n\nLab 02\nTu 1:45pm - 3:00pm\nOld Chemistry 003\n\n\n\n\n\n\nThere are no required textbooks for this course, the following textbooks are recommended for supplementary and reference purposes.\n\nAdvanced R (2nd ed.) - Wickham - Chapman and Hall/CRC, 2019 (978-0815384571)\nR for Data Science - Grolemund, Wickham - O‚ÄôReilly, 2016 (978-1491910399)"
  },
  {
    "objectID": "syllabus.html#additional-resources",
    "href": "syllabus.html#additional-resources",
    "title": "syllabus",
    "section": "Additional resources",
    "text": "Additional resources\nStudent mental health and wellness are of primary importance at Duke, and the university offers resources to support students in managing daily stress and self-care. Duke offers several resources for students to seek assistance on coursework and to nurture daily habits that support overall well-being, some of which are listed below\n\nThe Academic Resource Center: (919) 684-5917, theARC@duke.edu, or arc.duke.edu. The Academic Resource Center (the ARC) offers services to support students academically during their undergraduate careers at Duke. The ARC can provide support with time management, academic skills and strategies, course-specific tutoring, and more. ARC services are available free to any Duke undergraduate student, studying any discipline.\nDuWell: (919) 681-8421, provides Moments of Mindfulness (stress management and resilience building) and meditation programming (Koru workshop) to assist students in developing a daily emotional well-being practice. To see schedules for programs please see https://studentaffairs.duke.edu/duwell. All are welcome and no experience necessary.\n\nIf your mental health concerns and/or stressful events negatively affect your daily emotional state, academic performance, or ability to participate in your daily activities, many resources are available to help you through difficult times. Duke encourages all students to access these resources.\n\nDukeReach. Provides comprehensive outreach services to identify and support students in managing all aspects of well-being. If you have concerns about a student‚Äôs behavior or health visit the website for resources and assistance: https://students.duke.edu/wellness/dukereach/\nCounseling and Psychological Services (CAPS). CAPS services include individual and group counseling services, psychiatric services, and workshops. To initiate services, walk-in/call-in 9-4 M,W,Th,F and 9-6 Tuesdays. CAPS also provides referral to off- campus resources for specialized care.\n\n660-1000 or https://students.duke.edu/wellness/caps/\n\nTimelyCare (formerly known as Blue Devils Care). An online platform that is a convenient, confidential, and free way for Duke students to receive 24/7 mental health support through TalkNow and scheduled counseling. bluedevilscare.duke.edu"
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Lab 1: Hello R; hi git",
    "section": "",
    "text": "This lab will introduce you to the course computing workflow. The main goal is to get you setup with git in GitHub, link GitHub with RStudio and play around with a few basics.\nBy the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab1.html#log-in-to-rstudio",
    "href": "labs/lab1.html#log-in-to-rstudio",
    "title": "Lab 1: Hello R; hi git",
    "section": "Log in to RStudio",
    "text": "Log in to RStudio\n\nGo to https://cmgr.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA198-199 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven‚Äôt yet done so, you will need to reserve a container for STA323 first."
  },
  {
    "objectID": "labs/lab1.html#set-up-your-ssh-key",
    "href": "labs/lab1.html#set-up-your-ssh-key",
    "title": "Lab 1: Hello R; hi git",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask ‚ÄúNo SSH key found. Generate one now?‚Äù You should click 1 for yes.\nYou will generate a key. It will begin with ‚Äússh-rsa‚Ä¶.‚Äù R will then ask ‚ÄúWould you like to open a browser now?‚Äù You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta199).\n\nYou can find more detailed instructions here if you‚Äôre interested."
  },
  {
    "objectID": "labs/lab1.html#configure-git",
    "href": "labs/lab1.html#configure-git",
    "title": "Lab 1: Hello R; hi git",
    "section": "Configure Git",
    "text": "Configure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package. (And we also need to install a package called gert just for this step.)\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\ndevtools::install_github(\"r-lib/gert\")\n\nDownloading GitHub repo r-lib/gert@HEAD\n\n\n\n* checking for file ‚Äò/private/var/folders/36/9fvw0zp94f7382yggl_jvx5w0000gn/T/RtmpTHnYj6/remotes41fc39fb9922/r-lib-gert-a1ccebd/DESCRIPTION‚Äô ... OK\n* preparing ‚Äògert‚Äô:\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* running ‚Äòcleanup‚Äô\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‚Äògert_1.9.2.tar.gz‚Äô\n\n\nWarning in i.p(...): installation of package '/var/folders/\n36/9fvw0zp94f7382yggl_jvx5w0000gn/T//RtmpTHnYj6/file41fc479e6066/\ngert_1.9.2.tar.gz' had non-zero exit status\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\ndevtools::install_github(\"r-lib/gert\")\n\nDownloading GitHub repo r-lib/gert@HEAD\n\n\n\n* checking for file ‚Äò/private/var/folders/36/9fvw0zp94f7382yggl_jvx5w0000gn/T/RtmpTHnYj6/remotes41fc8c916c2/r-lib-gert-a1ccebd/DESCRIPTION‚Äô ... OK\n* preparing ‚Äògert‚Äô:\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* running ‚Äòcleanup‚Äô\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‚Äògert_1.9.2.tar.gz‚Äô\n\n\nWarning in i.p(...): installation of package '/var/folders/\n36/9fvw0zp94f7382yggl_jvx5w0000gn/T//RtmpTHnYj6/file41fc49f51f0f/\ngert_1.9.2.tar.gz' had non-zero exit status\n\nusethis::use_git_config(\n  user.name = \"Alexander Fisher\", \n  user.email = \"alexander.fisher@duke.edu\"\n  )\n\nYou are now ready interact with GitHub via RStudio!"
  },
  {
    "objectID": "labs/lab1.html#clone-the-repo-start-new-rstudio-project",
    "href": "labs/lab1.html#clone-the-repo-start-new-rstudio-project",
    "title": "Lab 1: Hello R; hi git",
    "section": "Clone the repo & start new RStudio project",
    "text": "Clone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta199-sp23-1 organization on GitHub. Click on the repo with the prefix lab-0. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you‚Äôll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ‚ûõ New Project ‚ûõVersion Control ‚ûõ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick lab-0-datasaurus.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "labs/lab1.html#r-and-r-studio",
    "href": "labs/lab1.html#r-and-r-studio",
    "title": "Lab 1: Hello R; hi git",
    "section": "R and R Studio",
    "text": "R and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file."
  },
  {
    "objectID": "labs/lab1.html#yaml",
    "href": "labs/lab1.html#yaml",
    "title": "Lab 1: Hello R; hi git",
    "section": "YAML",
    "text": "YAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for ‚ÄúYAML Ain‚Äôt Markup Language‚Äù. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document."
  },
  {
    "objectID": "labs/lab1.html#committing-changes",
    "href": "labs/lab1.html#committing-changes",
    "title": "Lab 1: Hello R; hi git",
    "section": "Committing changes",
    "text": "Committing changes\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on Diff. This shows you the difference between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\nIf you‚Äôre happy with these changes, we‚Äôll prepare the changes to be pushed to your remote repository. First, stage your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, ‚Äúupdated author name‚Äù) in the Commit message box. Finally, click Commit. Note that every commit needs to have a commit message associated with it.\nYou don‚Äôt have to commit after every change, as this would get quite tedious. You should commit states that are meaningful to you for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\nNow let‚Äôs make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you‚Äôre good to go!"
  },
  {
    "objectID": "labs/lab1.html#push-changes",
    "href": "labs/lab1.html#push-changes",
    "title": "Lab 1: Hello R; hi git",
    "section": "Push changes",
    "text": "Push changes\nNow that you have made an update and committed this change, it‚Äôs time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab0.html",
    "href": "labs/lab0.html",
    "title": "Lab 0: Hello R; hi git.",
    "section": "",
    "text": "This lab will introduce you to the course computing workflow. The main goal is to get you setup with git in GitHub, link GitHub with RStudio and play around with a few basics.\nBy the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab0.html#log-in-to-rstudio",
    "href": "labs/lab0.html#log-in-to-rstudio",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Log in to RStudio",
    "text": "Log in to RStudio\n\nGo to https://cmgr.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA323 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven‚Äôt yet done so, you will need to reserve a container for STA323 first."
  },
  {
    "objectID": "labs/lab0.html#set-up-your-ssh-key",
    "href": "labs/lab0.html#set-up-your-ssh-key",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask ‚ÄúNo SSH key found. Generate one now?‚Äù You should click 1 for yes.\nYou will generate a key. It will begin with ‚Äússh-rsa‚Ä¶.‚Äù R will then ask ‚ÄúWould you like to open a browser now?‚Äù You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta323).\n\nYou can find more detailed instructions here if you‚Äôre interested."
  },
  {
    "objectID": "labs/lab0.html#configure-git",
    "href": "labs/lab0.html#configure-git",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Configure Git",
    "text": "Configure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package. (And we also need to install a package called gert just for this step.)\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Alexander Fisher\", \n  user.email = \"alexander.fisher@duke.edu\"\n  )\n\nYou are now ready interact with GitHub via RStudio!"
  },
  {
    "objectID": "labs/lab0.html#clone-the-repo-start-new-rstudio-project",
    "href": "labs/lab0.html#clone-the-repo-start-new-rstudio-project",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Clone the repo & start new RStudio project",
    "text": "Clone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta323-sp23 organization on GitHub. Click on the repo with the prefix lab-0. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you‚Äôll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to Project in the upper-right. Click New Project -> Version Control -> Git and paste the SSH URL under ‚ÄúRepository URL‚Äù. Select Create Project.\nThe R Project will open by default. In the future, you can open the project manually by clicking in the upper right, Open Project, and navigate to lab-0.Rproj from the drop-down menu.\nClick lab-0.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "labs/lab0.html#r-and-r-studio",
    "href": "labs/lab0.html#r-and-r-studio",
    "title": "Lab 0: Hello R; hi git.",
    "section": "R and R Studio",
    "text": "R and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file."
  },
  {
    "objectID": "labs/lab0.html#yaml",
    "href": "labs/lab0.html#yaml",
    "title": "Lab 0: Hello R; hi git.",
    "section": "YAML",
    "text": "YAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for ‚ÄúYAML Ain‚Äôt Markup Language‚Äù. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document."
  },
  {
    "objectID": "labs/lab0.html#committing-changes",
    "href": "labs/lab0.html#committing-changes",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Committing changes",
    "text": "Committing changes\n\nIn the Terminal pane of RStudio, type pwd to ‚Äúprint working directory‚Äù, i.e.¬†show where in the filesystem you are. You should see something like /home/guest/lab-0-username. Next type ls to list files in the directory. You should see something similar:\n\nlab-0.Rproj  README.md lab-0.qmd\n\nType git status and press enter. You should see which files have been edited (highlighted in red). lab-0.qmd should be in red since you updated the YAML.\nType git add lab-0.qmd. This stages the file to be committed. In the future you can add several files to the same commit by repeating this step. You can type git status again to see the staged file (in green). Next type git commit -m \"updating YAML\". This will commit the file with the message between quotes.\nFinally git push to push the changes to the remote repository.\nNow let‚Äôs make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you‚Äôre good to go!"
  },
  {
    "objectID": "labs/lab0.html#push-changes",
    "href": "labs/lab0.html#push-changes",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Push changes",
    "text": "Push changes\nNow that you have made an update and committed this change, it‚Äôs time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab0.html#exercises",
    "href": "labs/lab0.html#exercises",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-0.qmd and show all your work. This lab-0 just has a few warm-up exercises to introduce you to some computing phenomena and general ideas.\n\nFloating point algebra.\n\nDo floating point numbers obey the rules of algebra? For example, one of the rules of algebra is additive association. (x + y) + z == x + (y + z). Check if this true in R using \\(x = 0.1\\), \\(y = 0.1\\) and \\(z = 1\\). Explain what you find.\n\nAdditional examples of floating point pecularity are provided below.\n\n# example 1\n0.2 == 0.6 / 3\n# example 2\npoint3 <- c(0.3, 0.4 - 0.1, 0.5 - 0.2, 0.6 - 0.3, 0.7 - 0.4)\npoint3\npoint3 == 0.3\n\nTo work around these issues, you could use all.equal() for checking the equality of two double quantities in R. What does all.equal() do?\n\n# example 1, all.equal()\nall.equal(0.2, 0.6 / 3)\n# example 2, all.equal()\npoint3 <- c(0.3, 0.4 - 0.1, 0.5 - 0.2, 0.6 - 0.3, 0.7 - 0.4)\npoint3\nall.equal(point3, rep(.3, length(point3)))\n\n\nInefficient math.\n\nYou‚Äôve collected 10 million observations in a vector called x and you summarize the mean of your observations:\n\n\nset.seed(2)\nn = 10000000\nx = rnorm(n, 1, 10)\nxbar = mean(x)\n\nA new observation comes in new_x = 15.0.\n\nnew_x = 15\nupdated_x = c(x, new_x)\n\nAlthough it won‚Äôt change much, you want to recompute the mean with this new data point. You could recompute the mean by re-running mean() on updated_x or you could observe that:\n\\[\n\\bar{x}_{n+1} = \\frac{1}{n+1}(n \\cdot\\bar{x}_n + x_{n+1})\n\\]\nCompare the time each method takes by surrounding each method with system.time({}).\n\n# method 1\nmean(updated_x)\n\n\n#method 2\n## program the equation above here and then time it with system.time({})\n\n\nInefficient code.\n\nTo quantify the inefficiency of a poorly written for loop, time both the code blocks below. Experiment with different values of n.¬†What do you observe?\n\n\n# method 1\nn <- 10\nx <- 1\nfor (i in seq_len(n)) {\n  x <- c(x, sqrt(x[i] * i))\n}\n\n\n# method 2\nn <- 10\nx <- rep(1, n + 1)\nfor (i in seq_len(n)) {\n  x[i + 1] <- sqrt(x[i] * i)\n}\n\n\nVector norms.\n\nIf \\(x\\) and \\(y\\) are scalar numbers, \\(x<y\\) makes sense. How do you compare the size of two different vectors \\(x\\) and \\(y\\)? A very typical way is the vector norm. The p-norm of vector \\(x\\) of length \\(n\\) is:\n\\[\n||x||_p = \\left( \\sum_{i=1}^n |x_i |^p \\right)^{1/p}\n\\]\nfor \\(p = 1, 2, ...\\). For example, if \\(p = 2\\) we have the Euclidean norm, also known as the \\(l_2\\) (read ‚ÄúL-2‚Äù) norm.\n\nVerify that the Euclidean norm of \\(x = \\left( 1, 2.5, -6.3 \\right)\\) is 6.851277 in R. You can compute the \\(l_1\\) and \\(l_2\\) norms in R using norm(x, type = \"1\") and norm(x, type = \"2\") respectively. Read the documentation, ?norm() and you will see you need to make sure the argument x is a matrix.\nCompare \\(||x||_2\\) and \\(||y||_2\\) where \\(y = \\left(0.8, 2.4, -6.4 \\right)\\).\nCompare \\(||x||_1\\) and \\(||y||_1\\), where again \\(x\\) and \\(y\\) are the vectors given above. Which is larger?"
  },
  {
    "objectID": "slides/01-welcome.html#meet-the-professor",
    "href": "slides/01-welcome.html#meet-the-professor",
    "title": "Welcome to STA 323",
    "section": "Meet the professor",
    "text": "Meet the professor\n\n\n\n\n\n\nAlexander Fisher\nalexander.fisher@duke.edu\nOffice hours: Wednesday 1:30-3:30pm in Old Chem 207\nA little bit about my research‚Ä¶"
  },
  {
    "objectID": "slides/01-welcome.html#why-data-science",
    "href": "slides/01-welcome.html#why-data-science",
    "title": "Welcome to STA 323",
    "section": "Why data science?",
    "text": "Why data science?\nData science turns data into knowledge.\n\nExamples"
  },
  {
    "objectID": "slides/01-welcome.html#course-overview",
    "href": "slides/01-welcome.html#course-overview",
    "title": "Welcome to STA 323",
    "section": "Course overview",
    "text": "Course overview"
  },
  {
    "objectID": "slides/01-welcome.html#learning-objectives",
    "href": "slides/01-welcome.html#learning-objectives",
    "title": "Welcome to STA 323",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of this course you will be able to‚Ä¶\n\nwrite efficient R code to (1) wrangle, explore and analyze data, (2) program algorithms to make inference under a variety of data generative models\nconduct independent data analysis and subsequently write and present results effectively"
  },
  {
    "objectID": "slides/01-welcome.html#assessments",
    "href": "slides/01-welcome.html#assessments",
    "title": "Welcome to STA 323",
    "section": "Assessments",
    "text": "Assessments\n\n\n\nAssignment\nDescription\n\n\n\n\nLabs (45%)\nBiweekly lab assignments.\n\n\nExams (35%)\nTwo take-home open-notes exams.\n\n\nFinal Project (15%)\nWritten report and presentation.\n\n\nQuizzes (5%)\nIn-class pop quizzes."
  },
  {
    "objectID": "slides/01-welcome.html#community",
    "href": "slides/01-welcome.html#community",
    "title": "Welcome to STA 323",
    "section": "Community",
    "text": "Community\nUphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised.\n\nAny violations in academic honesty standards as outlined in the Duke Community Standard and those specific to this course will automatically result in a 0 for the assignment and will be reported to the Office of Student Conduct for further action.\nLearning environment\n\nCreate a learning environment that is welcoming, inclusive, and accessible to everyone.\nRespect and honor each other.\n\nTeam work policy\nThe final project and several labs will be completed in teams. All group members are expected to participate equally. Commit history may be used to give individual team members different grades. Your grade may differ from the rest of your group."
  },
  {
    "objectID": "slides/01-welcome.html#late-policy",
    "href": "slides/01-welcome.html#late-policy",
    "title": "Welcome to STA 323",
    "section": "Late policy",
    "text": "Late policy\n\nHomeworks and labs can be turned in within 48 hours of the deadline for grade penalty (5% off per day).\nExams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\nThe Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\nLast minute coding/rendering issues will not be granted extensions."
  },
  {
    "objectID": "slides/01-welcome.html#course-toolkit",
    "href": "slides/01-welcome.html#course-toolkit",
    "title": "Welcome to STA 323",
    "section": "Course toolkit",
    "text": "Course toolkit\n\n\n\nResource\nDescription\n\n\n\n\ncourse website\ncourse notes, deadlines, assignments, office hours, syllabus\n\n\nSakai\nclass recordings, solutions and announcements\n\n\ncourse organization\nassignments, collaboration\n\n\nslack\nprimary communication\n\n\nRStudio containers*\nonline coding platform\n\n\n\nYou are welcome to install R and RStudio locally on your computer. If working locally you should make sure that your environment meets the following requirements:\n\nlatest R version\nlatest RStudio\nworking git installation\nability to create ssh keys (for GitHub authentication)\nAll R packages updated to their latest version from CRAN"
  },
  {
    "objectID": "slides/01-welcome.html#communication-and-missing-class",
    "href": "slides/01-welcome.html#communication-and-missing-class",
    "title": "Welcome to STA 323",
    "section": "Communication and missing class",
    "text": "Communication and missing class\nIf you have questions about homework/lab exercises, debugging, or any question about course materials\n\ncome to office hours\npost to a public channel in slack.\n\n\n\n\n\n\n\n\nWarning\n\n\nThe teaching team will not debug via email.\n\n\n\n\n\nWhen you miss a class:\n\nwatch the recorded lecture on Sakai\ncome to office hours or post in a public channel of slack if you have questions"
  },
  {
    "objectID": "slides/01-welcome.html#jump-in",
    "href": "slides/01-welcome.html#jump-in",
    "title": "Welcome to STA 323",
    "section": "Jump in",
    "text": "Jump in\n\nCheck your email / Sakai announcements for slack invite.\nPost on slack\nCreate a GitHub account\nTake this survey\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/01-welcome.html#what-is-statistical-computing",
    "href": "slides/01-welcome.html#what-is-statistical-computing",
    "title": "Welcome to STA 323",
    "section": "What is statistical computing?",
    "text": "What is statistical computing?\nBroadly, it‚Äôs turning data into knowledge using the computer.\n\nExamples of things we‚Äôll do in this course:\n\nScrape data off the web\nInteract with databases\nExtract useful parts of massive datasets in the blink of an eye using regular expressions\nOptimize code in R\nModel data with complicated likelihood functions and then write algorithms to maximize the likelihood\nBuild shiny web apps"
  },
  {
    "objectID": "slides/01-welcome.html#beginnings",
    "href": "slides/01-welcome.html#beginnings",
    "title": "Welcome to STA 323",
    "section": "Beginnings",
    "text": "Beginnings\n\nCheck your email / Sakai announcements for slack invite.\nPost on slack\nCreate a GitHub account (unless you already have one) on https://github.com/\n\none day you might want to show off your work, so choose a username you will be proud to show to a future employer.\n\nTell me your username by taking this survey. This is essential to receive credit on future assignments\n\n\n\n\n04:00"
  },
  {
    "objectID": "slides/01-welcome.html#sharing-reusing-code",
    "href": "slides/01-welcome.html#sharing-reusing-code",
    "title": "Welcome to STA 323",
    "section": "Sharing / reusing code",
    "text": "Sharing / reusing code\n\nUnless explicitly stated otherwise, this course‚Äôs policy is that you may make use of any online resources (e.g.¬†Google, existing StackOverflow answers, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).\nAny recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source.\nNarrative (non-code solutions) should always be entirely your own.\n\nLate policy\n\nHomeworks and labs can be turned in within 48 hours of the deadline for grade penalty (5% off per day).\nExams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\nThe Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\nLast minute coding/rendering issues will not be granted extensions."
  },
  {
    "objectID": "slides/01-welcome.html#section",
    "href": "slides/01-welcome.html#section",
    "title": "Welcome to STA 323",
    "section": "",
    "text": "{fig.align = ‚Äúcenter‚Äù}"
  },
  {
    "objectID": "slides/01-welcome.html#vectors",
    "href": "slides/01-welcome.html#vectors",
    "title": "Welcome to STA 323",
    "section": "Vectors",
    "text": "Vectors\nThe fundamental building block of data in R is a vector (collections of related values, objects, other data structures, etc).\nR has two types of vectors:\n\natomic vectors\n\nhomogeneous collections of the same type (e.g.¬†all logical values, all numbers, or all character strings).\n\ngeneric vectors\n\nheterogeneous collections of any type of R object, even other lists (meaning they can have a hierarchical/tree-like structure).\n\n\nI will use the term component or element when referring to a value inside a vector."
  },
  {
    "objectID": "slides/01-welcome.html#vector-relationships",
    "href": "slides/01-welcome.html#vector-relationships",
    "title": "Welcome to STA 323",
    "section": "Vector relationships",
    "text": "Vector relationships\n\nSource: https://r4ds.had.co.nz/vectors.html"
  },
  {
    "objectID": "slides/01-welcome.html#atomic-vectors",
    "href": "slides/01-welcome.html#atomic-vectors",
    "title": "Welcome to STA 323",
    "section": "Atomic vectors",
    "text": "Atomic vectors\nR has six atomic vector types:\nlogical, integer, double, character, complex, raw\nIn this course we will mostly work with the first four. You will rarely work with the last two types - complex and raw.\n\n\nx <- c(T, F, TRUE, FALSE)\ntypeof(x)\n\n[1] \"logical\"\n\n\n\ny <- c(\"a\", \"few\", \"more\", \"slides\")\ntypeof(y)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nNote\n\n\nc() is a function that combines arguments to form a vector. It‚Äôs a quick way to make small vectors for testing and experimentation. Later, we‚Äôll see better ways to create vectors."
  },
  {
    "objectID": "slides/01-welcome.html#coercion-hierarchy",
    "href": "slides/01-welcome.html#coercion-hierarchy",
    "title": "Welcome to STA 323",
    "section": "Coercion hierarchy",
    "text": "Coercion hierarchy\nIf you try to combine components of different types into a single atomic vector, R will try to coerce all elements so they can be represented as the simplest type. The ordering is logical < integer < double < character, where logical is considered the ‚Äúsimplest‚Äù.\n\nx <- c(T, 5, F, 0, 1)\ny <- c(\"a\", 1, T)\nz <- c(3.0, 4L, 0L)\n\n\n\n\nx\n\n[1] 1 5 0 0 1\n\ny\n\n[1] \"a\"    \"1\"    \"TRUE\"\n\nz\n\n[1] 3 4 0\n\n\n\n\ntypeof(x)\n\n[1] \"double\"\n\ntypeof(y)\n\n[1] \"character\"\n\ntypeof(z)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/01-welcome.html#logical-operations",
    "href": "slides/01-welcome.html#logical-operations",
    "title": "Welcome to STA 323",
    "section": "Logical operations",
    "text": "Logical operations\nBoolean operations\n\n\n\nOperator\nDefinition\nVectorized?\n\n\n\n\nx | y\nor\nyes\n\n\nx & y\nand\nyes\n\n\n!x\nnot\nyes\n\n\nx || y\nor\nno\n\n\nx && y\nand\nno\n\n\nxor(x,y)\nexclusive or\nyes\n\n\n\nComparison operations\n\n\n\nOperator\nDefinition\nVectorized?\n\n\n\n\nx < y\nless than\nyes\n\n\nx <= y\nless than or equal to\nyes\n\n\nx != y\nnot equal to\nyes\n\n\nx == y\nequal to\nyes\n\n\nx %in% y\nis x contained in y\nyes (over x)"
  },
  {
    "objectID": "slides/01-welcome.html#length-coercion-vector-recycling",
    "href": "slides/01-welcome.html#length-coercion-vector-recycling",
    "title": "Welcome to STA 323",
    "section": "Length coercion (vector recycling)",
    "text": "Length coercion (vector recycling)\nThe shorter of two atomic vectors in an operation is recycled until it is the same length as the longer atomic vector.\n\nx <- c(2, 4, 6)\ny <- c(1, 1, 1, 2, 2)\n\n\nx > y\n\n[1]  TRUE  TRUE  TRUE FALSE  TRUE\n\n\n\nx == y\n\n[1] FALSE FALSE FALSE  TRUE FALSE\n\n\n\n10 / x\n\n[1] 5.000000 2.500000 1.666667"
  },
  {
    "objectID": "slides/01-welcome.html#exercise",
    "href": "slides/01-welcome.html#exercise",
    "title": "Welcome to STA 323",
    "section": "Exercise",
    "text": "Exercise\nWhat do each of the following return? Run the code to check your answer.\n\na = c(1,4)\nb = c(1,2,3,5)\na + b\n\n\nx = c(1,2)\ny = c(5,10,15,20)\nz = c(2,4)\n(x * y) / z\n\n\nx = c(1, TRUE, 0)\ntypeof(x)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/01-welcome.html#exercises",
    "href": "slides/01-welcome.html#exercises",
    "title": "Welcome to STA 323",
    "section": "Exercises",
    "text": "Exercises\nWhat do each of the following return? Run the code to check your answer.\nExercise 1.\n\na = c(1,4)\nb = c(1,2,3,5)\na + b\n\nExercise 2.\n\nx = c(1,2)\ny = c(5,10,15,20)\nz = c(2,4)\n(x * y) / z\n\nExercise 3.\n\nx = c(1, TRUE, 0)\ntypeof(x)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab0.html#submitting-your-lab",
    "href": "labs/lab0.html#submitting-your-lab",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nFor future lab assignments (this one isn‚Äôt graded), you will submit your lab assignment by simply committing and pushing your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus)."
  },
  {
    "objectID": "slides/lab0-welcome.html#introductions",
    "href": "slides/lab0-welcome.html#introductions",
    "title": "Welcome to Lab",
    "section": "Introductions",
    "text": "Introductions\n\n\n\n\nMeet the TA!\nIntroduce yourself (icebreaker)\nFollow along these slides on the course website (under slides): sta323-sp23.github.io\nBookmark this! It‚Äôs the course website."
  },
  {
    "objectID": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "href": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "title": "Welcome to Lab",
    "section": "What to expect in labs",
    "text": "What to expect in labs\n\nIntroduce lab assignment (5-10 minutes, longer today)\nWork on the lab assignment (you can find it on the course website). You will work with others but your submission must be your own for the first few labs.\nTypically you won‚Äôt finish labs in-class and they will be due 1 week after they are released."
  },
  {
    "objectID": "slides/lab0-welcome.html#tips",
    "href": "slides/lab0-welcome.html#tips",
    "title": "Welcome to Lab",
    "section": "Tips",
    "text": "Tips\n\nRead all instructions on the lab.\nOne work strategy is to get through portions that you think will be most challenging (which initially might be the coding component) during lab when we can help you on the spot and leave the narrative writing until later.\nMake use of office hours. Before you need help!"
  },
  {
    "objectID": "slides/lab0-welcome.html#beginnings",
    "href": "slides/lab0-welcome.html#beginnings",
    "title": "Welcome to Lab",
    "section": "Beginnings",
    "text": "Beginnings\n\nIf you correctly followed the instructions from lecture then you should be a member of the course organization and have a repo lab-0-username in the course organization.\nIf you missed the first lecture, take the survey from the first lecture, found here and tell me your GitHub username so I can invite you to the organization and manually create a repo for you."
  },
  {
    "objectID": "slides/lab0-welcome.html#demo-setting-up",
    "href": "slides/lab0-welcome.html#demo-setting-up",
    "title": "Welcome to Lab",
    "section": "Demo: setting up",
    "text": "Demo: setting up\nNow that your lab repo is created, let‚Äôs setup git to work within RStudio.\nTo begin, open\n\nthe lab instructions here and\nthe RStudio containers here\nyour repo (that contains your starting files for the lab) here\n\nFollow the instructions in the lab as I demo.\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab0.html#style-guidelines",
    "href": "labs/lab0.html#style-guidelines",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, go to RStudio > Preferences > Code > Display > Show margin > 80. This will enable a vertical line in your .qmd files that shows you where the 80 character cutoff is for code chunks.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-0.qmd must not be changed and left as provided.\n\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "slides/lec02.html#if-and-ifelse",
    "href": "slides/lec02.html#if-and-ifelse",
    "title": "Control flow, loops, and functions",
    "section": "if and ifelse",
    "text": "if and ifelse\n\nif (test) {\n  do stuff\n}\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#if",
    "href": "slides/lec02.html#if",
    "title": "Control flow, loops, and functions",
    "section": "if",
    "text": "if\n\nif (condition) {\n  do stuff # when condition is TRUE\n}\n\nExamples\n\nx = c(1,2,3)\nif (2 %in% x) {\n  print(\"2 is in x!\")\n}\n\n[1] \"2 is in x!\"\n\n\n\nif (5 %in% x) \n  print(\"5 is in x!\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#if-statements",
    "href": "slides/lec02.html#if-statements",
    "title": "Control flow, loops, and functions",
    "section": "if statements",
    "text": "if statements\n\nif (condition) {\n  do stuff # when condition is TRUE\n}\n\nExamples\n\nx = c(1,2,3)\nif (2 %in% x) {\n  print(\"2 is in x!\")\n}\n\n[1] \"2 is in x!\"\n\n\n\nif (-6) {\n  print(\"Other types are coerced to logical if possible.\")\n}\n\n[1] \"Other types are coerced to logical if possible.\"\n\n\n\nif (5 %in% x) \n  print(\"5 is in x!\")\n\n\nif the statement is FALSE, {the code} does not execute"
  },
  {
    "objectID": "slides/lec02.html#if-is-not-vectorized",
    "href": "slides/lec02.html#if-is-not-vectorized",
    "title": "Control flow, loops, and functions",
    "section": "if is not vectorized",
    "text": "if is not vectorized\nWhile many operators and functions in R are vectorized,\n\nx = c(1,2,3)\n\n\nexp(x)\n\n[1]  2.718282  7.389056 20.085537\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nx + 2\n\n[1] 3 4 5\n\n\n\nif statements are not\n\n\n\nif (x == 1) {\n  print(\"x is 1!\")\n}\n\nWarning in if (x == 1) {: the condition has length > 1 and only the first\nelement will be used\n\n\n[1] \"x is 1!\""
  },
  {
    "objectID": "slides/lec02.html#collapsing-logical-vectors",
    "href": "slides/lec02.html#collapsing-logical-vectors",
    "title": "Control flow, loops, and functions",
    "section": "Collapsing logical vectors",
    "text": "Collapsing logical vectors\n\nx = c(1, 2, 3)\nx > 0\n\n[1] TRUE TRUE TRUE\n\n\nany() and all() can help us collapse this to a single argument (like ‚Äúor‚Äù/‚Äúand‚Äù logic)\n\nany(x > 0)\n\n[1] TRUE\n\nall(x > 0)\n\n[1] TRUE\n\n\n\n\nif (any(x > 0)) {\n  print(\"At least one element of x is greater than 0.\")\n}\n\n[1] \"At least one element of x is greater than 0.\""
  },
  {
    "objectID": "slides/lec02.html#else-if-else-and-ifelse",
    "href": "slides/lec02.html#else-if-else-and-ifelse",
    "title": "Control flow, loops, and functions",
    "section": "else if, else and ifelse",
    "text": "else if, else and ifelse\n\n\n\nx = 3\nif (x < 0) {\n  \"x is negative\"\n} else if (x > 0) {\n  \"x is positive\"\n} else {\n  \"x is zero\"\n}\n\n[1] \"x is positive\"\n\n\n\n\nx = 0\nif (x < 0) {\n  \"x is negative\"\n} else if (x > 0) {\n  \"x is positive\"\n} else {\n  \"x is zero\"\n}\n\n[1] \"x is zero\"\n\n\n\n\nx = -1\nifelse(x > 0,\n       \"positive\",\n       \"not positive\")\n\n[1] \"not positive\""
  },
  {
    "objectID": "slides/lec02.html#stop-and-stopifnot",
    "href": "slides/lec02.html#stop-and-stopifnot",
    "title": "Control flow, loops, and functions",
    "section": "stop and stopifnot",
    "text": "stop and stopifnot\nWe often need to validate user input and function arguments. If our validation fails, we want to report the error and stop execution.\n\nok = FALSE\n\n\nif (!ok)\n  stop(\"Things are not ok.\")\n\nError in eval(expr, envir, enclos): Things are not ok.\n\n\n\nstopifnot(ok)\n\nError: ok is not TRUE\n\n\n\n\n\n\n\n\nNote\n\n\nAn error (like the one generated by stop) will prevent a quarto document from rendering unless #| error: true is set for that code chunk"
  },
  {
    "objectID": "slides/lec02.html#placing-checkpoints",
    "href": "slides/lec02.html#placing-checkpoints",
    "title": "Control flow, loops, and functions",
    "section": "Placing checkpoints",
    "text": "Placing checkpoints\nAlways place checkpoints upstream (find errors as quickly as possible).\n\n\nBad checkpoint placement\n\nif (condition_one) {\n  ##\n  ## Do stuff\n  ##\n} else if (condition_two) {\n  ##\n  ## Do other stuff\n  ##\n} else if (condition_error) {\n  stop(\"Condition error occured\")\n}\n\n\nGood checkpoint placement\n\n# Do stuff better\nif (condition_error) {\n  stop(\"Condition error occured\")\n}\nif (condition_one) {\n  ##\n  ## Do stuff\n  ##\n} else if (condition_two) {\n  ##\n  ## Do other stuff\n  ##\n}"
  },
  {
    "objectID": "slides/lec02.html#exercise-1",
    "href": "slides/lec02.html#exercise-1",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 1",
    "text": "Exercise 1\nConsider two vectors, x and y, each of length one. Write a set of conditionals that satisfy the following.\n\nIf x is positive and y is negative or y is positive and x is negative, print ‚Äúknits‚Äù.\nIf x divided by y is positive, print ‚Äústink‚Äù.\nStop execution if x or y are zero.\n\nTest your code with various x and y values. Where did you place the stop execution code?"
  },
  {
    "objectID": "slides/lec02.html#loop-types",
    "href": "slides/lec02.html#loop-types",
    "title": "Control flow, loops, and functions",
    "section": "Loop types",
    "text": "Loop types\nR supports three types of loops: for, while, and repeat.\n\nfor (item in vector) {\n##\n## Iterate this code\n##\n}\n\n\nwhile (we_have_a_true_condition) {\n##\n## Iterate this code\n##\n}\n\n\nrepeat {\n##\n## Iterate this code\n##\n}"
  },
  {
    "objectID": "slides/lec02.html#for-loops",
    "href": "slides/lec02.html#for-loops",
    "title": "Control flow, loops, and functions",
    "section": "for loops",
    "text": "for loops\nfor loops are used to iterate over items in a vector. They have the following basic form:\n\nfor (item in vector) perform_action\n\n\nfor (nakama in c(\"Luffy\", \"Nami\", \"Zoro\")) {\n  print(nakama)\n}\n\n[1] \"Luffy\"\n[1] \"Nami\"\n[1] \"Zoro\"\n\n\n\nfor (i in 1:4) {\n  log(i)\n}\n\n\nAutomatic printing is turned off in loops."
  },
  {
    "objectID": "slides/lec02.html#while-loops",
    "href": "slides/lec02.html#while-loops",
    "title": "Control flow, loops, and functions",
    "section": "while loops",
    "text": "while loops\nwhile loops interate until a condition is false\n\nsquares = rep(0, 5)\nsquares\n\n[1] 0 0 0 0 0\n\n\n\ni = 1\nwhile (i < 6) {\n  squares[i] = i^2\n  i = i + 1\n}\nsquares\n\n[1]  1  4  9 16 25"
  },
  {
    "objectID": "slides/lec02.html#repeat-loops",
    "href": "slides/lec02.html#repeat-loops",
    "title": "Control flow, loops, and functions",
    "section": "repeat loops",
    "text": "repeat loops\nrepeat loops repeatedly iterate code until a break is reached.\n\ni = 1\nsquares = rep(0, 5)\nrepeat {\nsquares[i] = i ^ 2\ni = i + 1\nif (i > 5) {break}\n}\nsquares\n\n[1]  1  4  9 16 25"
  },
  {
    "objectID": "slides/lec02.html#loop-keywords-next-and-break",
    "href": "slides/lec02.html#loop-keywords-next-and-break",
    "title": "Control flow, loops, and functions",
    "section": "loop keywords: next and break",
    "text": "loop keywords: next and break\n\nnext exits the current iteration and advances the looping index\nbreak exits the loop\nboth break andnext apply only to the innermost of nested loops.\n\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {next}\n  print(paste(\"Number\", i, \"is odd.\"))\n  if (i %% 7 == 0) {break}\n  }\n\n[1] \"Number 1 is odd.\"\n[1] \"Number 3 is odd.\"\n[1] \"Number 5 is odd.\"\n[1] \"Number 7 is odd.\""
  },
  {
    "objectID": "slides/lec02.html#auxiliary-loop-functions",
    "href": "slides/lec02.html#auxiliary-loop-functions",
    "title": "Control flow, loops, and functions",
    "section": "Auxiliary loop functions",
    "text": "Auxiliary loop functions\nYou may want to loop over indices of an object as opposed to the object‚Äôs values. To do this, consider using one of length(), seq(), seq_along(), and seq_len().\n\n\n\nseq_along(x) is preferred to 1:length(x) e.g.\nx = list()\nlength(x)\n\n[1] 0\n\n1:length(x)\n\n[1] 1 0\n\nseq_along(x)\n\ninteger(0)\n\n\n\n\nMany ways to generate sequences‚Ä¶\n\n1:5\n\n[1] 1 2 3 4 5\n\nseq(1:5)\n\n[1] 1 2 3 4 5\n\nseq_len(5)\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/lec02.html#exercise-2",
    "href": "slides/lec02.html#exercise-2",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 2",
    "text": "Exercise 2\nConsider the vector x below.\n\nx = c(3, 4, 12, 19, 23, 49, 100, 63, 70)\n\nWrite R code that prints the perfect squares in x.\nExercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#exercise-3",
    "href": "slides/lec02.html#exercise-3",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 3",
    "text": "Exercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#exercises",
    "href": "slides/lec02.html#exercises",
    "title": "Control flow, loops, and functions",
    "section": "Exercises",
    "text": "Exercises\nExercise 2\nConsider the vector x below.\n\nx = c(3, 4, 12, 19, 23, 49, 100, 63, 70)\n\nWrite R code that prints the perfect squares in x.\nExercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#function-composition",
    "href": "slides/lec02.html#function-composition",
    "title": "Control flow, loops, and functions",
    "section": "Function composition",
    "text": "Function composition\nA function is comprised of arguments (formals), and code (body).\n\nquadraticRoots = function(a, b, c) {\n  x1 = (-b + sqrt((b^2) - (4*a*c))) / (2*a)\n  x2 = (-b - sqrt((b^2) - (4*a*c))) / (2*a)\n  return(c(x1, x2))\n}\n\nquadraticRoots(1, -2, -3)\n\n[1]  3 -1\n\n\n\nformals(quadraticRoots)\n\n$a\n\n\n$b\n\n\n$c\n\nbody(quadraticRoots)\n\n{\n    x1 = (-b + sqrt((b^2) - (4 * a * c)))/(2 * a)\n    x2 = (-b - sqrt((b^2) - (4 * a * c)))/(2 * a)\n    return(c(x1, x2))\n}"
  },
  {
    "objectID": "slides/lec02.html#returns",
    "href": "slides/lec02.html#returns",
    "title": "Control flow, loops, and functions",
    "section": "Returns",
    "text": "Returns\nThere are two approaches to returning values from functions in R - explicit and implicit returns.\nExplicit - using one or more return function calls\n\nf = function(x) {\n  return(x * x)\n}\nf(2)\n\n[1] 4\n\n\n\nImplicit - return value of the last expression is returned.\n\ng = function(x) {\n  x * x\n}\ng(3)\n\n[1] 9"
  },
  {
    "objectID": "slides/lec02.html#invisible-returns",
    "href": "slides/lec02.html#invisible-returns",
    "title": "Control flow, loops, and functions",
    "section": "Invisible returns",
    "text": "Invisible returns\nMany functions in R make use of an invisible return value\n\nvisible\n\n\nf = function(x) {\n  print(x)\n}\ny = f(1)\n\n[1] 1\n\ny\n\n[1] 1\n\n\n\n\ninvisible\n\n\ng = function(x) {\n  invisible(x)\n}\ng(2)\nz = g(2)\nz\n\n[1] 2"
  },
  {
    "objectID": "slides/lec02.html#invisible-returns-1",
    "href": "slides/lec02.html#invisible-returns-1",
    "title": "Control flow, loops, and functions",
    "section": "Invisible returns",
    "text": "Invisible returns\nMany functions in R make use of an invisible return value\n\nvisible\n\n\nf = function(x) {\n  print(x)\n}\ny = f(1)\n\n[1] 1\n\ny\n\n[1] 1\n\n\n\ninvisible\n\n\ng = function(x) {\n  invisible(x)\n}\ng(2)\nz = g(2)\nz\n\n[1] 2\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#arguments",
    "href": "slides/lec02.html#arguments",
    "title": "Control flow, loops, and functions",
    "section": "Arguments",
    "text": "Arguments\nWhen defining a function we explicitly define names for the arguments, which become variables within the scope of the function.\nWhen calling a function we can use these names to pass arguments in an alternative order.\n\nf = function(x, y, z = 1) { # z defaults to 1\n  paste0(\"x=\", x, \" y=\", y, \" z=\", z)\n}\n\n\n\n\nf(1, 2, 3)\n\n[1] \"x=1 y=2 z=3\"\n\nf(z = 1, x = 2, y = 3)\n\n[1] \"x=2 y=3 z=1\"\n\nf(y = 2, 1, 3)\n\n[1] \"x=1 y=2 z=3\"\n\n\n\n\nf(1)\n\nError in paste0(\"x=\", x, \" y=\", y, \" z=\", z): argument \"y\" is missing, with no default\n\nf(1, 2)\n\n[1] \"x=1 y=2 z=1\"\n\nf(1, 2, 3, 4)\n\nError in f(1, 2, 3, 4): unused argument (4)\n\nf(1 , 2, m = 3)\n\nError in f(1, 2, m = 3): unused argument (m = 3)"
  },
  {
    "objectID": "slides/lec02.html#scope",
    "href": "slides/lec02.html#scope",
    "title": "Control flow, loops, and functions",
    "section": "Scope",
    "text": "Scope\nR has generous scoping rules, if it can‚Äôt find a variable in the current scope (e.g.¬†a function‚Äôs body) it will look for it in the next higher scope, and so on.\n\ny = 1\nf = function(x) {\n  x + y\n}\nf(3)\n\n[1] 4\n\n\n\n\ny = 1\ng = function(x) {\n  y = 2\n  x + y\n}\ng(3)\n\n[1] 5\n\n\n\n\nAdditionally, variables defined within a scope only persist for the duration of that scope, and do not overwrite variables at a higher scopes"
  },
  {
    "objectID": "slides/lec02.html#lazy-evaluation",
    "href": "slides/lec02.html#lazy-evaluation",
    "title": "Control flow, loops, and functions",
    "section": "Lazy evaluation",
    "text": "Lazy evaluation\nArguments to R functions are not evaluated until needed.\n\nf = function(a, b, x) {\n  print(a)\n  print(b ^ 2)\n  0 * x\n}\nf(5, 6)\n\n[1] 5\n[1] 36\n\n\nError in f(5, 6): argument \"x\" is missing, with no default"
  },
  {
    "objectID": "slides/lec02.html#function-forms",
    "href": "slides/lec02.html#function-forms",
    "title": "Control flow, loops, and functions",
    "section": "Function forms",
    "text": "Function forms\n\n\n\n\n\n\n\n\nForm\nDescription\nExample(s)\n\n\n\n\nPrefix\nname comes before arguments\nlog(x, base = exp(1))\n\n\nInfix\nname between arguments\n+, %>%, %/%\n\n\nReplacement\nreplace values by assignment\nnames(x) <- c(\"a\", \"b\")\n\n\nSpecial\nall others not defined above\n[[, for, break, ("
  },
  {
    "objectID": "slides/lec02.html#help",
    "href": "slides/lec02.html#help",
    "title": "Control flow, loops, and functions",
    "section": "Help",
    "text": "Help\nTo get help on any function, type ?fcn_name in your console, where fcn_name is the function‚Äôs name. For infix, replacement, and special functions you will need to surround the function with backticks.\n\n?mean\n?`for`\n?`+`\n\nFor functions not in the base package, you can generally see their implementation by entering the function name without parentheses (or using the body function).\n\nlm |>\n  head()\n\n                                                                         \n1 function (formula, data, subset, weights, na.action, method = \"qr\",    \n2     model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n3     contrasts = NULL, offset, ...)                                     \n4 {                                                                      \n5     ret.x <- x                                                         \n6     ret.y <- y"
  },
  {
    "objectID": "slides/lec02.html#function-best-practices",
    "href": "slides/lec02.html#function-best-practices",
    "title": "Control flow, loops, and functions",
    "section": "Function best practices",
    "text": "Function best practices\n\nWrite a function when you have copied code more than twice.\nTry to use a verb for your function‚Äôs name.\nKeep argument names short but descriptive.\nAdd code comments to explain the ‚Äúwhy‚Äù of your code.\nLink a family of functions with a common prefix: pnorm(), pbinom(), ppois().\nKeep data arguments first, then other required arguments, then followed by default arguments. The ‚Ä¶ argument can be placed last."
  },
  {
    "objectID": "slides/lec02.html#a-summary-of-r",
    "href": "slides/lec02.html#a-summary-of-r",
    "title": "Control flow, loops, and functions",
    "section": "A summary of R",
    "text": "A summary of R\n\nTo understand computations in R, two slogans are helpful:\nEverything that exists is an object.\nEverything that happens is a function call.\n‚Äî John Chambers\n\nJohn McKinley Chambers is the creator of the S programming language, and core member of the R programming language project. The R programming is often called a successor to the S programming language.\n\n\nüîó sta323-sp23.github.io"
  }
]